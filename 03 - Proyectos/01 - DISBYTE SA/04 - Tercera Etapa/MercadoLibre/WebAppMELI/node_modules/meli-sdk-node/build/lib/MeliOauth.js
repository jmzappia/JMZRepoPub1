"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeliOauth = void 0;
const got_1 = __importDefault(require("got"));
var GrantTypes;
(function (GrantTypes) {
    GrantTypes["RefreshToken"] = "refresh_token";
    GrantTypes["Authorization"] = "authorization_code";
})(GrantTypes || (GrantTypes = {}));
class MeliOauth {
    static getAuthUrl({ auth_url, state, redirect_uri, client_id, }) {
        return `${auth_url}/authorization?response_type=code&client_id=${client_id}&redirect_uri=${redirect_uri}${state ? `&state=${state}` : ""}`;
    }
    static authorize(code, appInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const { body: response } = yield this.http.post({
                json: {
                    grant_type: GrantTypes.Authorization,
                    client_id: appInfo.client_id,
                    client_secret: appInfo.client_secret,
                    code,
                    redirect_uri: appInfo.redirect_uri,
                },
            });
            if ("error" in response && response.error === "invalid_request") {
                console.log("[MELI SDK] Problem in Meli Servers not processing request with data in BODY correctly, sending in SEARCH PARAMS");
                const searchParams = new URLSearchParams();
                searchParams.append("grant_type", GrantTypes.Authorization);
                searchParams.append("client_id", appInfo.client_id.toString());
                searchParams.append("client_secret", appInfo.client_secret);
                searchParams.append("redirect_uri", appInfo.redirect_uri);
                searchParams.append("code", code);
                const { body } = yield this.http.post({
                    searchParams,
                    throwHttpErrors: false,
                });
                return body;
            }
            return response;
        });
    }
    static refreshAccessToken(refresh_token, appInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const { body: response } = yield this.http.post({
                json: {
                    grant_type: GrantTypes.RefreshToken,
                    client_id: appInfo.client_id,
                    client_secret: appInfo.client_secret,
                    refresh_token,
                },
            });
            if ("error" in response && response.error === "invalid_request") {
                console.log("[MELI SDK] Problem in Meli Servers not processing request with data in BODY correctly, sending in SEARCH PARAMS");
                const searchParams = new URLSearchParams();
                searchParams.append("grant_type", GrantTypes.RefreshToken);
                searchParams.append("client_id", appInfo.client_id.toString());
                searchParams.append("client_secret", appInfo.client_secret);
                searchParams.append("refresh_token", refresh_token);
                const { body } = yield this.http.post({
                    searchParams,
                });
                return body;
            }
            return response;
        });
    }
}
exports.MeliOauth = MeliOauth;
MeliOauth.http = got_1.default.extend({
    prefixUrl: "https://api.mercadolibre.com/oauth/token",
    throwHttpErrors: false,
    responseType: "json",
    headers: {
        accept: "application/json",
        "content-type": "application/x-www-form-urlencoded",
    },
});
