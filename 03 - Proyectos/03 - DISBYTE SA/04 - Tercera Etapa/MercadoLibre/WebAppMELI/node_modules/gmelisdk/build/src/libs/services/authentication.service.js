"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticateByRefreshToken = exports.authenticateByCode = exports.modelAuthRefreshToken = exports.modelAuthMeli = void 0;
const httpRequest_1 = require("../httpRequest");
const endpoints_1 = require("../api/endpoints");
exports.modelAuthMeli = (code) => {
    return {
        grant_type: 'authorization_code',
        client_id: process.env.MERCADOLIBRE_APIKEY,
        client_secret: process.env.MERCADOLIBRE_SECRETKEY,
        code: code,
        redirect_uri: process.env.REDIRECT_URI
    };
};
exports.modelAuthRefreshToken = (refresh_token) => {
    return {
        grant_type: 'refresh_token',
        client_id: process.env.MERCADOLIBRE_APIKEY,
        client_secret: process.env.MERCADOLIBRE_SECRETKEY,
        redirect_uri: process.env.REDIRECT_URI,
        refresh_token: refresh_token
    };
};
exports.authenticateByCode = (code) => __awaiter(void 0, void 0, void 0, function* () {
    const params = exports.modelAuthMeli(code);
    console.log(params);
    const options = {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(params)
    };
    return yield httpRequest_1.request(endpoints_1.endPoints.oauth_url, options);
});
exports.authenticateByRefreshToken = (refresh_token) => __awaiter(void 0, void 0, void 0, function* () {
    const params = exports.modelAuthRefreshToken(refresh_token);
    const options = {
        method: "POST",
        headers: {
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded"
        },
        body: JSON.stringify(params)
    };
    return yield httpRequest_1.request(endpoints_1.endPoints.oauth_url, options);
});
