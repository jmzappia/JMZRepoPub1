"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Meli = void 0;
const got_1 = __importDefault(require("got"));
const url_1 = require("url");
class Meli {
    constructor(httpInstanceOptions) {
        this.http = got_1.default.extend({
            prefixUrl: "https://api.mercadolibre.com",
            responseType: "json",
            throwHttpErrors: false,
            hooks: {
                beforeRequest: [
                    (options) => {
                        options.headers["Authorization"] = `Bearer ${this.accessToken}`;
                    },
                ],
            },
            mutableDefaults: true,
        });
        const newConfig = httpInstanceOptions || {};
        this.http.defaults.options = got_1.default.mergeOptions(this.http.defaults.options, newConfig);
    }
    checkConfig() {
        if (!this.accessToken || !this.accountId) {
            throw new Error('Please use the "setAccount" method to add Access Token and Account Id');
        }
    }
    setAccount({ accessToken, accountId }) {
        this.accessToken = accessToken;
        this.accountId = accountId;
        return this;
    }
    resetAccount() {
        this.accessToken = undefined;
        this.accountId = undefined;
    }
    getResource(resource) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`${resource.startsWith("/") ? resource.slice(0) : resource}`);
            return body;
        });
    }
    getQuestions(filters) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const searchParams = new url_1.URLSearchParams();
            let url = `questions/search`;
            if ((filters === null || filters === void 0 ? void 0 : filters.from) && filters.item) {
                searchParams.append("from", filters.from.toString());
                searchParams.append("item", filters.item);
            }
            else {
                searchParams.append("seller_id", this.accountId.toString());
            }
            if (filters === null || filters === void 0 ? void 0 : filters.status) {
                searchParams.append("status", filters.status);
            }
            if (filters === null || filters === void 0 ? void 0 : filters.sort) {
                searchParams.append("sort_types", filters.sort.order);
                searchParams.append("sort_fields", filters.sort.fields);
            }
            searchParams.append("limit", ((_a = filters === null || filters === void 0 ? void 0 : filters.limit) === null || _a === void 0 ? void 0 : _a.toString()) || "25");
            searchParams.append("offset", ((_b = filters === null || filters === void 0 ? void 0 : filters.offset) === null || _b === void 0 ? void 0 : _b.toString()) || "0");
            if (filters === null || filters === void 0 ? void 0 : filters.questionId) {
                url = `questions/${filters.questionId}`;
                searchParams.delete("*");
            }
            searchParams.append("api_version", "4");
            const response = yield this.http.get(url, {
                searchParams,
            });
            return response.body;
        });
    }
    answerQuestion(question_id, answer) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.post(`answers`, {
                json: {
                    question_id,
                    text: answer,
                },
            });
            return body;
        });
    }
    deleteQuestion(questionId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.delete(`questions/${questionId}`);
            return body;
        });
    }
    getItemIds(query, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const searchParams = new url_1.URLSearchParams();
            if (query) {
                searchParams.append("q", query);
            }
            const { body } = yield this.http.get(`users/${this.accountId}/items/search`, {
                searchParams,
            });
            return body;
        });
    }
    createItem(itemData) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.post(`items/`, {
                json: Object.assign({}, itemData),
            });
            return body;
        });
    }
    addDescription(itemId, description) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.post(`items/${itemId}/description`, {
                json: {
                    plain_text: description,
                },
            });
            return body;
        });
    }
    changeItemStock(itemId, newStock) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.put(`items/${itemId}`, {
                json: {
                    available_quantity: newStock,
                },
            });
            return body;
        });
    }
    changeItemStatus(itemId, status) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.put(`items/${itemId}`, {
                json: {
                    status: status,
                },
            });
            return body;
        });
    }
    getItems(ids, selectAttributes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const params = new url_1.URLSearchParams();
            params.append("ids", ids.join(","));
            if (selectAttributes) {
                params.append("attributes", selectAttributes.join(","));
            }
            const { body } = yield this.http.get(`items`, {
                searchParams: params,
            });
            return body;
        });
    }
    getItem(itemId, selectAttributes) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const params = new url_1.URLSearchParams();
            if (selectAttributes) {
                params.append("attributes", selectAttributes.join(","));
            }
            const { body } = yield this.http.get(`items/${itemId}`, {
                searchParams: params,
            });
            return body;
        });
    }
    getUserInfo(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`users/${userId}`);
            return body;
        });
    }
    getOrders(filters) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            let url;
            switch (filters) {
                case "recent":
                    url = `orders/search/recent?seller=${this.accountId}&sort=date_desc`;
                    break;
                case "pending":
                    url = `orders/search/pending?seller=${this.accountId}&sort=date_desc`;
                    break;
                case "archived":
                    url = `orders/search/archived?seller=${this.accountId}&sort=date_desc`;
                    break;
                default:
                    url = `orders/search?seller=${this.accountId}&sort=date_desc`;
                    break;
            }
            const { body } = yield this.http.get(url);
            return body;
        });
    }
    getOrderDetails(orderId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`orders/${orderId}`);
            return body;
        });
    }
    getPackOrders(packId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`packs/${packId}`);
            return body;
        });
    }
    getOrderMessages(orderId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`messages/packs/${orderId}/sellers/${this.accountId}?mark_as_read=false&tag=post_sale`);
            return body;
        });
    }
    sendMessage(options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.post(`messages/packs/${options.msgGroupId}/sellers/${this.accountId}?tag=post_sale`, {
                json: {
                    from: {
                        user_id: this.accountId,
                    },
                    to: {
                        user_id: options.buyerId,
                    },
                    text: options.message,
                },
            });
            return body;
        });
    }
    getCategories(siteId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`sites/${siteId}/categories`);
            return body;
        });
    }
    getCategoryDetails(categoryId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`categories/${categoryId}`);
            return body;
        });
    }
    getCategoryAttributes(categoryId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`categories/${categoryId}/attributes`);
            return body;
        });
    }
    getQuestionsResponseTime() {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`${this.accountId}/questions/response_time`);
            return body;
        });
    }
    validateItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.post(`items/validate`, {
                json: Object.assign({}, item),
            });
            return body;
        });
    }
    getComissionAmount(categoryId, price) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`sites/MLA/listing_prices?price=${price}&category_id=${categoryId}`);
            return body;
        });
    }
    getBillingInfo(orderId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkConfig();
            const { body } = yield this.http.get(`orders/${orderId}/billing_info`);
            return body;
        });
    }
}
exports.Meli = Meli;
