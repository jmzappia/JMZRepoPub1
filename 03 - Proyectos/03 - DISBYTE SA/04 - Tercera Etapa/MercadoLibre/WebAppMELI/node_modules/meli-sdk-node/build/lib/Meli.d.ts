import { Options } from "got";
import { GetQuestionsFilters, MeliApiError, MeliCategoriesResponse, MeliCategoryAttributesResponse, MeliCategoryDetails, MeliGetItemsByIdsResponse, MeliItem, MeliItemAttributes, MeliMessagesResponse, MeliOrder, MeliOrdersSearchResponse, MeliQuestionsResponse, MeliQuestionsResponseTime, MeliSendMessageOptions, MeliUserData } from "./types";
declare type HttpInstanceOptions = Omit<Options, "throwHttpErrors">;
export interface MeliConfig {
    accessToken: string;
    accountId: number;
}
export declare class Meli {
    private accessToken?;
    accountId?: number;
    protected http: import("got").Got;
    constructor(httpInstanceOptions?: HttpInstanceOptions);
    private checkConfig;
    setAccount({ accessToken, accountId }: MeliConfig): this;
    resetAccount(): void;
    getResource<T = any>(resource: string): Promise<T | MeliApiError>;
    getQuestions<T = MeliQuestionsResponse>(filters?: GetQuestionsFilters): Promise<T | MeliApiError>;
    answerQuestion<T>(question_id: number, answer: string): Promise<T | MeliApiError>;
    deleteQuestion<T>(questionId: number): Promise<T | MeliApiError>;
    getItemIds<T>(query?: string, options?: Record<string, any>): Promise<T | MeliApiError>;
    createItem<T>(itemData: any): Promise<T | MeliApiError>;
    addDescription<T>(itemId: string, description: string): Promise<T | MeliApiError>;
    changeItemStock<T>(itemId: string, newStock: number): Promise<T | MeliApiError>;
    changeItemStatus<T>(itemId: string, status: "active" | "paused" | string): Promise<T | MeliApiError>;
    getItems<K extends MeliItemAttributes>(ids: string[], selectAttributes?: K[]): Promise<MeliGetItemsByIdsResponse<K>[] | MeliApiError>;
    getItem<T extends MeliItemAttributes>(itemId: string, selectAttributes?: T[]): Promise<MeliItem | MeliApiError>;
    getUserInfo<T = MeliUserData>(userId: number): Promise<T | MeliApiError>;
    getOrders<T = MeliOrdersSearchResponse>(filters?: any): Promise<T | MeliApiError>;
    getOrderDetails<T = MeliOrder>(orderId: number): Promise<T | MeliApiError>;
    getPackOrders<T>(packId: number): Promise<T | MeliApiError>;
    getOrderMessages<T = MeliMessagesResponse>(orderId: number): Promise<T | MeliApiError>;
    sendMessage<T>(options: MeliSendMessageOptions): Promise<T | MeliApiError>;
    getCategories<T = MeliCategoriesResponse>(siteId: string): Promise<T | MeliApiError>;
    getCategoryDetails<T = MeliCategoryDetails>(categoryId: string): Promise<T | MeliApiError>;
    getCategoryAttributes<T = MeliCategoryAttributesResponse>(categoryId: string): Promise<T | MeliApiError>;
    getQuestionsResponseTime<T = MeliQuestionsResponseTime>(): Promise<T | MeliApiError>;
    validateItem<T>(item: any): Promise<T | MeliApiError>;
    getComissionAmount<T>(categoryId: string, price: number): Promise<T | MeliApiError>;
    getBillingInfo<T>(orderId: number): Promise<T | MeliApiError>;
}
export {};
