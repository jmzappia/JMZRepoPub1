import { useEffect, useRef } from 'react';
var useComponentDidMount = function (callback) {
    var ref = useRef(callback);
    useEffect(ref.current, []);
};
var useComponentUnmount = function (callback) {
    var ref = useRef(callback);
    useEffect(function () { return ref.current; }, []);
};
var usePreviousProp = function (value) {
    var ref = useRef(); // This ref is an object which holds a prop called current which is mutable.
    useEffect(function () {
        ref.current = value;
        // stores the current value in ref
        return function () { return ref.current = undefined; };
    }, [value]); // only re-run if the parameter value changes
    // return previous value (happens before update in useEffect above)
    return ref.current;
};
export { useComponentDidMount, useComponentUnmount, usePreviousProp };
